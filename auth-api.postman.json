{
  "info": {
    "name": "Auth API Tests",
    "description": "Collection for testing authentication endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Sign Up",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\",\n    \"confirmPassword\": \"{{testPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/signup",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "signup"]
        },
        "description": "Register a new user"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has userId\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('userId');",
              "    pm.expect(response.userId).to.be.a('string');",
              "    pm.environment.set('userId', response.userId);",
              "});",
              "",
              "pm.test(\"Response has success message\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('message');",
              "    pm.expect(response.message).to.equal('User created successfully');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Sign In",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/callback/credentials",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "callback", "credentials"]
        },
        "description": "Sign in with credentials"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has access token\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('access_token');",
              "    pm.environment.set('accessToken', response.access_token);",
              "});",
              "",
              "pm.test(\"Response has user information\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response.user).to.have.property('email');",
              "    pm.expect(response.user.email).to.equal(pm.environment.get('testEmail'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Sign In - Invalid Credentials",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"wrongpassword\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/callback/credentials",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "callback", "credentials"]
        },
        "description": "Try to sign in with wrong password"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('error');",
              "    pm.expect(response.error).to.equal('Invalid password');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Sign Up - Existing Email",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\",\n    \"confirmPassword\": \"{{testPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/signup",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "signup"]
        },
        "description": "Try to register with existing email"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 409\", function () {",
              "    pm.response.to.have.status(409);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('error');",
              "    pm.expect(response.error).to.equal('User with this email already exists');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Sign Up - Invalid Data",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"T\",\n    \"email\": \"invalid-email\",\n    \"password\": \"short\",\n    \"confirmPassword\": \"different\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/signup",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "signup"]
        },
        "description": "Try to register with invalid data"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response has validation error\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('error');",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}